{{page-title 'Time Picker'}}

<h1>
  time-picker
</h1>

<p>
  This component adds a configurable time picker which emits an action if the selected time changes.
</p>

<h2>
  Basic Usage
</h2>
<TimePicker @value={{this.time}} @onChange={{this.updateTime}} />
<CodeBlock @language="handlebars">
  &lt;TimePicker @value={{this.time}} @onChange={{this.updateTime}} /&gt;
</CodeBlock>

<p>
  You can pass in either a moment instance as value, or a time in string form like "08:30".
</p>

<h2>
  With a min/max values & 15min step
</h2>
<TimePicker
  @value={{this.time}}
  @onChange={{this.updateTime}}
  @minTime='08:30'
  @maxTime='17:30'
  @step={{15}}
/>
<CodeBlock @language="handlebars">
  &lt;TimePicker
  @value={{this.time}}
  @onChange={{this.updateTime}}
  @minTime='08:30'
  @maxTime='17:30'
  @step={{15}}
/&gt;
</CodeBlock>

<h2>
  Disabled
</h2>
<TimePicker @disabled={{true}} @onChange={{this.updateTime}} />
<CodeBlock @language="handlebars">
  &lt;TimePicker @disabled={{true}} @onChange={{this.updateTime}} /&gt;
</CodeBlock>

<h2>
  Notes about the Usage
</h2>

<p>
  Note that this will send moment.js objects with the corresponding times set on them as parameter for the action.
  They are basically generated like this:
  <CodeInline @language="javascript">
    moment(0).hours(hours).minutes(minutes);
  </CodeInline>
  .
</p>

<p>
  This means that you can work with them like this:
</p>

<CodeBlock @language="javascript">
  actions: {
  updateTime(time) {
    let date = this.get('date');
    let hours = time ? time.hours() : 0;
    let minutes = time ? time.minutes() : 0;
    let newDate = date.clone().startOf('day').hours(hours).minutes(minutes);
    // Do something with newDate
  }
}
</CodeBlock>

Or simply use the included util which does exactly the above:

<CodeBlock @language="javascript">
import setTimeOnDate from 'ember-date-components/utils/set-time-on-date';
// ...

@action
updateTime(time) {
  let date = this.get('date');
  let newDate = setTimeOnDate(date, time);
  // Do something with newDate
}
</CodeBlock>

<p>
  Other useful tips: You can always close the time picker with ESC.
  The date picker tries to be as smart as possible about recognizing input.
  This means that you can enter things like:
</p>

<ul>
  <li>
    7
  </li>
  <li>
    8pm
  </li>
  <li>
    6,5
  </li>
  <li>
    14:30
  </li>
  <li>
    9:30 pm
  </li>
</ul>

<p>
  And press enter, and the time will be parsed from it.
</p>

<h2>
  Attributes
</h2>

<table class='table table-bordered table-hover table-striped'>
  <thead>
    <tr>
      <th>
        Attribute
      </th>
      <th>
        Description
      </th>
      <th>
        Default
      </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>
        value
      </td>
      <td>
        The default value for the time picker.
        This can be null, a moment.js-Date, or a parseable string like
        <CodeInline>
          14:30
        </CodeInline>
        or
        <CodeInline>
          7:15 pm
        </CodeInline>
      </td>
      <td>
        <CodeInline @language="javascript">
          null
        </CodeInline>
      </td>
    </tr>
    <tr>
      <td>
        action
      </td>
      <td>
        The action to call whenever the time changes.
        The action will receive the selected (moment.js) date as parameter.
      </td>
      <td>
        <CodeInline @language="javascript">
          null
        </CodeInline>
      </td>
    </tr>
    <tr>
      <td>
        minTime
      </td>
      <td>
        The minimum selectable time. No time before this time will be selectable.
        This can be either a moment.js date, or a parseable string.
      </td>
      <td>
        <CodeInline @language="javascript">
          null
        </CodeInline>
      </td>
    </tr>
    <tr>
      <td>
        maxTime
      </td>
      <td>
        The maximum selectable time. No time after this time will be selectable.
        This can be either a moment.js date, or a parseable string.
      </td>
      <td>
        <CodeInline @language="javascript">
          null
        </CodeInline>
      </td>
    </tr>
    <tr>
      <td>
        step
      </td>
      <td>
        The step in which the times can be set, in minutes.
        Times entered will be rounded to the nearest fitting step.
      </td>
      <td>
        <CodeInline @language="javascript" @class="no-wrap">
          30
        </CodeInline>
      </td>
    </tr>
    <tr>
      <td>
        selectStep
      </td>
      <td>
        The steps that are available in the dropdown. By default, this takes the value
        from
        <CodeInline @language="javascript" @class="no-wrap">
          step
        </CodeInline>
        , so you don't need to define
        this again here. You only need to set it if you want
        the select to e.g. only show 30 minute steps, while also allowing the entry of 15 minute steps.
      </td>
      <td>
        <CodeInline @language="javascript" @class="no-wrap">
          null
        </CodeInline>
      </td>
    </tr>
    <tr>
      <td>
        placeholder
      </td>
      <td>
        The placeholder for the time input. Defaults to 'Enter time...'.
      </td>
      <td>
        <CodeInline @language="javascript" @class="no-wrap">
          'Enter time...'
        </CodeInline>
      </td>
    </tr>
    <tr>
      <td>
        inputClasses
      </td>
      <td>
        Classes to add to the time input.
      </td>
      <td>
        <CodeInline @language="javascript" @class="no-wrap">
          ''
        </CodeInline>
      </td>
    </tr>
    <tr>
      <td>
        dropdownClasses
      </td>
      <td>
        Classes to add to the dropdown container.
      </td>
      <td>
        <CodeInline @language="javascript" @class="no-wrap">
          ''
        </CodeInline>
      </td>
    </tr>
    <tr>
      <td>
        amPm
      </td>
      <td>
        If the am/pm time format should be used instead of the 24h format.
        By default, this is computed from the moment.js locale.
        You can overwrite this if necessary.
      </td>
      <td>
        <CodeInline @language="javascript" @class="no-wrap">
          true
        </CodeInline>
      </td>
    </tr>
    <tr>
      <td>
        disabled
      </td>
      <td>
        If this is true, the time cannot be changed.
      </td>
      <td>
        <CodeInline @language="javascript">
          false
        </CodeInline>
      </td>
    </tr>
    <tr>
      <td>
        renderInPlace
      </td>
      <td>
        This is passed through to ember-basic-dropdown.
        See
        <a href='https://www.ember-basic-dropdown.com/docs/api-reference'>
          ember-basic-dropdown docs
        </a>
        for details.
      </td>
      <td>
        <CodeInline @language="javascript">
          false
        </CodeInline>
      </td>
    </tr>
    <tr>
      <td>
        horizontalPosition
      </td>
      <td>
        This is passed through to ember-basic-dropdown.
        See
        <a href='https://www.ember-basic-dropdown.com/docs/api-reference'>
          ember-basic-dropdown docs
        </a>
        for details.
      </td>
      <td>
        <CodeInline @language="javascript">
          'auto'
        </CodeInline>
      </td>
    </tr>
    <tr>
      <td>
        verticalPosition
      </td>
      <td>
        This is passed through to ember-basic-dropdown.
        See
        <a href='https://www.ember-basic-dropdown.com/docs/api-reference'>
          ember-basic-dropdown docs
        </a>
        for details.
      </td>
      <td>
        <CodeInline @language="javascript">
          'auto'
        </CodeInline>
      </td>
    </tr>
  </tbody>
</table>